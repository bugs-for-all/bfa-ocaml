enum generics::Foo::<i64>[@TraitDecl0<i64>]
  =
|  Bar(i64)
|  Baz()

enum generics::Foo::<u128>[@TraitDecl0<u128>]
  =
|  Bar(u128)
|  Baz()

trait core::marker::Sized<Self>

fn generics::main()
{
  v@0 : ();
  a^1 : generics::Foo::<i64>[@TraitDecl0<i64>];
  b^2 : generics::Foo::<u128>[@TraitDecl0<u128>];
  v@3 : bool;
  v@4 : generics::Foo::<i64>[@TraitDecl0<i64>];
  v@5 : bool;
  v@6 : generics::Foo::<u128>[@TraitDecl0<u128>];

  block@0 {
    a^1 := generics::Foo::<i64>[@TraitDecl0<i64>]::generics::Foo::<i64>[@TraitDecl0<i64>]::Bar ((1: i64 : i64));
    fake_read a^1;
    b^2 := generics::Foo::<u128>[@TraitDecl0<u128>]::generics::Foo::<u128>[@TraitDecl0<u128>]::Baz ();
    fake_read b^2;
    v@4 := move a^1;
    v@3 := move generics::is_bar(move v@4);
    storage_dead v@4;
    storage_dead v@3;
    v@6 := move b^2;
    v@5 := move generics::is_bar(move v@6);
    storage_dead v@6;
    storage_dead v@5;
    v@0 := ();
    storage_dead b^2;
    storage_dead a^1;
    v@0 := ();
    return;
  }
}

fn generics::is_bar(f^1 : generics::Foo::<i64>[@TraitDecl0<i64>]) -> bool
{
  v@0 : bool;
  f^1 : generics::Foo::<i64>[@TraitDecl0<i64>];
  v@2 : isize;

  block@0 {
    fake_read f^1;
    v@2 := discriminant(f^1);
    switch move v@2    [0: isize -> block@1; _ -> block@2];
  }

  block@1 {
    v@0 := (true : bool);
    goto block@3;
  }

  block@2 {
    v@0 := (false : bool);
    goto block@3;
  }

  block@3 {
    drop f^1;
    return;
  }
}

fn generics::is_bar(f^1 : generics::Foo::<u128>[@TraitDecl0<u128>]) -> bool
{
  v@0 : bool;
  f^1 : generics::Foo::<u128>[@TraitDecl0<u128>];
  v@2 : isize;

  block@0 {
    fake_read f^1;
    v@2 := discriminant(f^1);
    switch move v@2    [0: isize -> block@1; _ -> block@2];
  }

  block@1 {
    v@0 := (true : bool);
    goto block@3;
  }

  block@2 {
    v@0 := (false : bool);
    goto block@3;
  }

  block@3 {
    drop f^1;
    return;
  }
}