# This is a basic workflow to help you get started with Actions

name: CI

permissions: read-all
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    
env:
  CHARON_REPO: https://github.com/AeneasVerif/charon.git
  CHARON_COMMIT_HASH: f164b4acf7bda7271c3aa0b433a393ad14117aca

jobs:
  build:
    strategy:
      matrix:
        operating-system: [macos-latest, macos-13]
    runs-on: ${{ matrix.operating-system }}
    steps:
      # Setup steps: checkout, z3, node, ocaml
      - uses: actions/checkout@v4
      - name: Setup Z3
        uses: cda-tum/setup-z3@v1
        id: z3
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Restore Charon cache
        uses: actions/cache@v4
        id: restore-charon-cache
        with:
          path: charon-bins
          key: ${{ runner.os }}-${{ runner.arch }}-charon-$CHARON_COMMIT_HASH
      - name: Install charon if not cached
        run: |
          brew install make
          cd ..
          mkdir charon
          cd charon
          git init
          git remote add origin $CHARON_REPO
          git fetch --depth=1 origin $CHARON_COMMIT_HASH
          git checkout $CHARON_COMMIT_HASH
          gmake build-dev-charon-rust
          cp -r bin ../soteria/charon-bins
        if: ${{ !steps.restore-charon-cache.outputs.cache-hit }}
      - name: Add Charon to path
        run: echo "$PWD/charon-bins/bin" >> $GITHUB_PATH
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'
      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.3.0
          dune-cache: true
          opam-pin: false
      - name: Restore opam cache
        uses: actions/cache@v4
        with:
          path: _opam
          key: ${{ runner.os }}-${{ runner.arch }}-opam-${{ hashFiles('*.opam') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-opam-
      # OCaml build and tests
      - name: setup dependencies
        run: make ocaml-deps
      - name: Build OCaml stuff
        run: make ocaml
      - name: test
        run: Make ocaml-test
      # Building js stuff
      - name: Install JS dependencies
        run: yarn install
      - name: Build JS stuff
        run: yarn compile
      # Packaging OCaml distribution and sending it as artifact
      - name: OCaml zip file creation
        run: make package
      - name: Upload zip file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.operating-system }}-package
          path: package
          if-no-files-found: error
      - name: Opam Cleanup
        run: opam clean -a -r

  test-package:
    strategy:
      matrix:
        operating-system: [macos-latest, macos-13]
    runs-on: ${{ matrix.operating-system }}
    needs: build
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.operating-system }}-package
      - name: Add executable permissions
        run: |
          chmod +x ./bin/soteria-c
          chmod +x ./bin/z3
      - name: Write dummy C file
        run: echo "int main() { return 12; }" > test.c
      - run: DYLD_LIBRARY_PATH=./lib:$DYLD_LIBRARY_PATH ./bin/soteria-c exec-main test.c
        env:
          SOTERIA_Z3_PATH: ./bin/z3
          CERB_INSTALL_PREFIX: .
